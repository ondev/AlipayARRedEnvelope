//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class APMCache, APMTaskScheduler, ImageCache2, NSLock, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSOperationQueue, NetworkSetting;

@interface APImageManager : NSObject
{
    ImageCache2 *_imageCache;
    NSMutableDictionary *_compressDictionary;
    NSLock *_compressLock;
    NSOperationQueue *_compressQueue;
    NSOperationQueue *_resizeQueue;
    NSOperationQueue *_uploadQueue;
    NetworkSetting *_networkCloudSetting;
    double _timeout4Upload;
    double _timeout4Download;
    APMTaskScheduler *_uploadTaskScheduler;
    NSOperationQueue *_queryCacheNSQueue;
    APMTaskScheduler *_queryCacheTaskScheduler;
    NSOperationQueue *_downloadDjangoQueue;
    NSOperationQueue *_downloadUrlQueue;
    APMTaskScheduler *_djangoDownloadScheduler;
    APMTaskScheduler *_urlDownloadScheduler;
    NSObject<OS_dispatch_queue> *_taskQueue;
    NSMutableDictionary *_uploadDictionary;
    NSLock *_uploadLock;
    NSLock *_oneCompressTaskLock;
    NSObject<OS_dispatch_queue> *_pjpegDecodeQueue;
    APMCache *_localIDPHAssetCache;
    NSMutableDictionary *_cacheInfoForPhasset;
    NSLock *_cacheLockForPhasset;
    NSOperationQueue *_iCloudLowQualityImageQueue;
}

+ (struct CGSize)convertRealSize:(struct CGSize)arg1;
+ (id)getOriginalImageFilePathWithUrl:(id)arg1;
+ (id)manager;
@property(retain, nonatomic) NSOperationQueue *iCloudLowQualityImageQueue; // @synthesize iCloudLowQualityImageQueue=_iCloudLowQualityImageQueue;
@property(retain, nonatomic) NSLock *cacheLockForPhasset; // @synthesize cacheLockForPhasset=_cacheLockForPhasset;
@property(retain, nonatomic) NSMutableDictionary *cacheInfoForPhasset; // @synthesize cacheInfoForPhasset=_cacheInfoForPhasset;
@property(retain, nonatomic) APMCache *localIDPHAssetCache; // @synthesize localIDPHAssetCache=_localIDPHAssetCache;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *pjpegDecodeQueue; // @synthesize pjpegDecodeQueue=_pjpegDecodeQueue;
@property(retain, nonatomic) NSLock *oneCompressTaskLock; // @synthesize oneCompressTaskLock=_oneCompressTaskLock;
@property(retain, nonatomic) NSLock *uploadLock; // @synthesize uploadLock=_uploadLock;
@property(retain, nonatomic) NSMutableDictionary *uploadDictionary; // @synthesize uploadDictionary=_uploadDictionary;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *taskQueue; // @synthesize taskQueue=_taskQueue;
@property(retain, nonatomic) APMTaskScheduler *urlDownloadScheduler; // @synthesize urlDownloadScheduler=_urlDownloadScheduler;
@property(retain, nonatomic) APMTaskScheduler *djangoDownloadScheduler; // @synthesize djangoDownloadScheduler=_djangoDownloadScheduler;
@property(retain, nonatomic) NSOperationQueue *downloadUrlQueue; // @synthesize downloadUrlQueue=_downloadUrlQueue;
@property(retain, nonatomic) NSOperationQueue *downloadDjangoQueue; // @synthesize downloadDjangoQueue=_downloadDjangoQueue;
@property(retain, nonatomic) APMTaskScheduler *queryCacheTaskScheduler; // @synthesize queryCacheTaskScheduler=_queryCacheTaskScheduler;
@property(retain, nonatomic) NSOperationQueue *queryCacheNSQueue; // @synthesize queryCacheNSQueue=_queryCacheNSQueue;
@property(retain, nonatomic) APMTaskScheduler *uploadTaskScheduler; // @synthesize uploadTaskScheduler=_uploadTaskScheduler;
@property(nonatomic) double timeout4Download; // @synthesize timeout4Download=_timeout4Download;
@property(nonatomic) double timeout4Upload; // @synthesize timeout4Upload=_timeout4Upload;
@property(retain, nonatomic) NetworkSetting *networkCloudSetting; // @synthesize networkCloudSetting=_networkCloudSetting;
@property(retain, nonatomic) NSOperationQueue *uploadQueue; // @synthesize uploadQueue=_uploadQueue;
@property(retain, nonatomic) NSOperationQueue *resizeQueue; // @synthesize resizeQueue=_resizeQueue;
@property(retain, nonatomic) NSOperationQueue *compressQueue; // @synthesize compressQueue=_compressQueue;
@property(retain, nonatomic) NSLock *compressLock; // @synthesize compressLock=_compressLock;
@property(retain, nonatomic) NSMutableDictionary *compressDictionary; // @synthesize compressDictionary=_compressDictionary;
- (void).cxx_destruct;
- (id)AutoImgComPress2:(id)arg1 Quality:(long long)arg2;
- (_Bool)isGrayUser;
- (_Bool)hasZeroValueInSize:(struct CGSize)arg1;
- (id)defaultImageRequest;
- (CDUnknownBlockType)generateDownloadOriginalImageCompleteBlockWithRequest:(id)arg1 url:(id)arg2;
- (struct CGSize)scaleSizeWithOriginalSize:(struct CGSize)arg1 zoo:(struct CGSize)arg2;
- (id)imageRequestWithBusiness:(id)arg1 progress:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)massSwitchEnabled4Watermark;
- (_Bool)massSwitchEnabled4TFSImages;
- (_Bool)massSwitchEnabled4DjangoImages;
- (id)locationFromUIImage:(id)arg1;
- (id)locationFromPHAsset:(id)arg1;
- (id)locationFromALAsset:(id)arg1;
- (id)locationFromImage:(id)arg1;
- (void)setAliasKey:(id)arg1 forKey:(id)arg2;
- (_Bool)checkCosistencyWithKey:(id)arg1 aliasKey:(id)arg2;
- (void)checkCosistencyAndUpdateWithKey:(id)arg1 request:(id)arg2 sync:(_Bool)arg3;
- (void)storeImageWithALAssetLibrary:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)storeImageToPHPhotoLibrary:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)storeImageToPhotoAblum:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)storeImageToPhotoWithIdentifier:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3 complete:(CDUnknownBlockType)arg4;
- (unsigned long long)getImageCacheTypeBySize:(struct CGSize)arg1 originalSize:(struct CGSize)arg2;
- (double)getProgressOfCloudID:(id)arg1 request:(id)arg2;
- (double)getProgressOfCloudID:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (unsigned long long)getStatusOfCloudID:(id)arg1 request:(id)arg2;
- (unsigned long long)getStatusOfCloudID:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)setTaskExecuteSequenceWithRequest:(id)arg1 forTask:(id)arg2;
- (void)doCompleteCallback:(id)arg1 object:(id)arg2 error:(id)arg3 userInfo:(id)arg4;
- (void)doProgressWithDic:(id)arg1 progressBlock:(CDUnknownBlockType)arg2;
- (id)createProgressDictionary:(double)arg1 partialBytes:(long long)arg2 totalBytes:(long long)arg3;
- (_Bool)needStoreOriginalMemImage2CacheWithImage:(id)arg1 compareWithSize:(struct CGSize)arg2;
- (_Bool)canIdentifierBeParsedAsNsurl:(id)arg1;
- (_Bool)isRequestRedirected:(id)arg1 identifier:(id)arg2 imageTask:(id)arg3;
- (_Bool)isRequestRedirectd:(id)arg1 complete:(CDUnknownBlockType)arg2 identifier:(id)arg3;
- (id)doResizeImage:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (id)getCompressKeyForLocalId:(id)arg1 imageType:(unsigned long long)arg2 size:(struct CGSize)arg3;
- (id)queryUploadImageInfoForLocalId:(id)arg1;
- (void)removeUploadImageInfoForLocalId:(id)arg1;
- (void)setUploadImageInfo:(id)arg1 forLocalId:(id)arg2;
- (id)queryCompressForLocalId:(id)arg1;
- (void)removeCompressForLocalId:(id)arg1;
- (void)setCompressForObject:(id)arg1 forLocalId:(id)arg2;
- (id)getImageFromRepresentation:(id)arg1;
- (id)getDataFromRepresentation:(id)arg1;
- (id)asynCompresseImage:(id)arg1 compress:(unsigned long long)arg2 localId:(id)arg3;
- (id)getCompressedDataFromImage:(id)arg1 compress:(unsigned long long)arg2;
- (_Bool)needCompressWithCompressLevel:(unsigned long long)arg1 dataSize:(long long)arg2 isGif:(_Bool)arg3;
- (id)getCompressedDataFromAsset:(id)arg1 compress:(unsigned long long)arg2 representData:(id)arg3;
- (unsigned long long)getImageTypeWithCompressLevel:(unsigned long long)arg1 andFileSize:(long long)arg2;
- (unsigned long long)getImageTypeWithCompressLevel:(unsigned long long)arg1;
- (unsigned long long)getCompressLevelFromLocalId:(id)arg1;
- (id)getLocalIdFromMd5:(id)arg1 withCompress:(unsigned long long)arg2;
- (id)generateHttpsUrlFromHttpUrl:(id)arg1;
- (id)buildUrl:(id)arg1;
- (id)addBusiness:(id)arg1 toUrlString:(id)arg2;
- (id)resolveImageUrlString:(id)arg1 size:(struct CGSize)arg2;
- (void)cancelTaskWithLocalIds:(id)arg1;
- (void)batchUploadImageWithLocalIds:(id)arg1 business:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)getLocalIdsWithArray:(id)arg1 size:(struct CGSize)arg2 compressLevel:(unsigned long long)arg3;
- (void)storeImageintoCache:(id)arg1 WithCacheKey:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4 cacheOptions:(id)arg5;
- (_Bool)storeImageIntoCache:(id)arg1 withIdentifier:(id)arg2 imageRequest:(id)arg3;
- (id)queryImageFromDiskCacheWithKey:(id)arg1 request:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4;
- (id)queryImageFromMemCacheWithKey:(id)arg1 request:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4;
- (_Bool)isImageCacheExsitFor:(id)arg1 request:(id)arg2;
- (_Bool)isImageCacheExsitFor:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)clearCacheForIdentifier:(id)arg1;
- (id)syncGetImageCacheForIdentifier:(id)arg1 request:(id)arg2 waitForiCloud:(_Bool)arg3;
- (id)syncGetImageCacheForIdentifier:(id)arg1 request:(id)arg2;
- (id)getImageCacheDataForIdentifier:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)asyncGetImageCacheForIdentifier:(id)arg1 request:(id)arg2;
- (void)getImageCacheForIdentifier:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3 complete:(CDUnknownBlockType)arg4;
- (id)getCacheDataForCloudId:(id)arg1 imageType:(unsigned long long)arg2 size:(struct CGSize)arg3;
- (id)getCacheImageForCloudId:(id)arg1 imageType:(unsigned long long)arg2 size:(struct CGSize)arg3;
- (id)getImageCacheForIdentifier:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)downlaodExternalImageUseAFNetworking:(id)arg1 cacheKey:(id)arg2 request:(id)arg3 taskRecord:(id)arg4 useHttps:(_Bool)arg5;
- (void)handleExtenalImageWithUrl:(id)arg1 image:(id)arg2 cacheKey:(id)arg3 request:(id)arg4 Data:(id)arg5 withTaskRecord:(id)arg6 useMass:(_Bool)arg7;
- (void)downloadExternalImageUseMass:(id)arg1 cacheKey:(id)arg2 request:(id)arg3 taskRecord:(id)arg4;
- (void)handleBase64Url:(id)arg1 cacheKey:(id)arg2 request:(id)arg3 taskRecord:(id)arg4;
- (void)addURLDownloadTask:(id)arg1 request:(id)arg2 cacheKey:(id)arg3 progress:(CDUnknownBlockType)arg4 originalImageComplete:(CDUnknownBlockType)arg5;
- (id)getExternalImageWithUrl:(id)arg1 request:(id)arg2;
- (id)generalWaterMarkImageWithId:(id)arg1 sourceId:(id)arg2 zoom:(struct CGSize)arg3 position:(unsigned long long)arg4 transparency:(unsigned long long)arg5 width:(unsigned long long)arg6 height:(unsigned long long)arg7 xgap:(unsigned long long)arg8 ygap:(unsigned long long)arg9 p:(unsigned long long)arg10 progress:(CDUnknownBlockType)arg11 completion:(CDUnknownBlockType)arg12;
- (void)downloadWatermarkUseAfnetworking:(id)arg1 business:(id)arg2 sourceId:(id)arg3 identifier:(id)arg4 zoom:(id)arg5 positionStr:(id)arg6 transparencyStr:(id)arg7 widthStr:(id)arg8 heightStr:(id)arg9 xgapStr:(id)arg10 ygapStr:(id)arg11 pStr:(id)arg12 isWebp:(_Bool)arg13 task:(id)arg14;
- (void)addWatermarkDownloadTask:(id)arg1 business:(id)arg2 sourceId:(id)arg3 identifier:(id)arg4 zoom:(id)arg5 positionStr:(id)arg6 transparencyStr:(id)arg7 widthStr:(id)arg8 heightStr:(id)arg9 xgapStr:(id)arg10 ygapStr:(id)arg11 pStr:(id)arg12 isWebp:(_Bool)arg13 progress:(CDUnknownBlockType)arg14 withIdCompletion:(CDUnknownBlockType)arg15;
- (void)downloadWaterMarkUseMass:(id)arg1 identifier:(id)arg2 business:(id)arg3 sourceId:(id)arg4 zoom:(id)arg5 positionStr:(id)arg6 transparencyStr:(id)arg7 widthStr:(id)arg8 heightStr:(id)arg9 xgapStr:(id)arg10 ygapStr:(id)arg11 pStr:(id)arg12 isWebP:(_Bool)arg13 task:(id)arg14;
- (id)getWaterMarkImageWithId:(id)arg1 business:(id)arg2 sourceId:(id)arg3 zoom:(struct CGSize)arg4 position:(unsigned long long)arg5 transparency:(unsigned long long)arg6 width:(unsigned long long)arg7 height:(unsigned long long)arg8 xgap:(unsigned long long)arg9 ygap:(unsigned long long)arg10 p:(unsigned long long)arg11 progress:(CDUnknownBlockType)arg12 withIdCompletion:(CDUnknownBlockType)arg13;
- (id)generalKeyForGetWaterWithId:(id)arg1 sourceId:(id)arg2 zoom:(struct CGSize)arg3 position:(unsigned long long)arg4 transparency:(unsigned long long)arg5 width:(unsigned long long)arg6 height:(unsigned long long)arg7 xgap:(unsigned long long)arg8 ygap:(unsigned long long)arg9;
- (id)generalKeyForGetImage:(id)arg1 imageType:(unsigned long long)arg2 width:(double)arg3 height:(double)arg4;
- (_Bool)cancelGetWaterMarkImage:(id)arg1;
- (_Bool)cancelGetImage:(id)arg1 zoom:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)downloadFileFromDjangoWithID:(id)arg1 business:(id)arg2 destination:(id)arg3 taskRecord:(id)arg4 respType:(unsigned long long)arg5 useHttps:(_Bool)arg6 md5:(id)arg7;
- (void)downloadImage:(id)arg1 request:(id)arg2 taskRecord:(id)arg3 useHttps:(_Bool)arg4;
- (void)downloadThumbnailFromDjangoWithID:(id)arg1 request:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4 zoom:(id)arg5 isWebP:(_Bool)arg6 taskRecord:(id)arg7 useHttps:(_Bool)arg8;
- (id)generateDataFromImage:(id)arg1;
- (id)convertData:(id)arg1 toJPEGWithImage:(id)arg2;
- (void)handleDownloadResp:(id)arg1 request:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4 zoomAppend:(id)arg5 taskRecord:(id)arg6 imagedata:(id)arg7 useHttps:(_Bool)arg8 isWebP:(_Bool)arg9 error:(id)arg10;
- (id)createPJPEGConfiguration;
- (void)downloadImage:(id)arg1 request:(id)arg2 imageType:(unsigned long long)arg3 size:(struct CGSize)arg4 zoomAppend:(id)arg5 taskRecord:(id)arg6 useHttps:(_Bool)arg7;
- (void)getImageWithUploadLocalId:(id)arg1 zoom:(struct CGSize)arg2 withIdCompletion:(CDUnknownBlockType)arg3;
- (void)getImageWithUploadLocalId:(id)arg1 zoom:(struct CGSize)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addDownloadTask:(id)arg1 request:(id)arg2 idendifier:(id)arg3 imageType:(unsigned long long)arg4 realSize:(struct CGSize)arg5 zoomAppend:(id)arg6;
- (void)getLowQualityImage:(id)arg1 identifier:(id)arg2 request:(id)arg3 size:(struct CGSize)arg4 curTryCount:(int)arg5 lastTry:(_Bool)arg6 complete:(CDUnknownBlockType)arg7;
- (void)getTheBestLowQualityImage:(id)arg1 identifier:(id)arg2 request:(id)arg3;
- (id)doGetImage:(id)arg1 request:(id)arg2;
- (id)getImage:(id)arg1 request:(id)arg2;
- (id)getImage:(id)arg1 business:(id)arg2 zoom:(struct CGSize)arg3 originalSize:(struct CGSize)arg4 progress:(CDUnknownBlockType)arg5 completion:(CDUnknownBlockType)arg6;
- (id)getImage:(id)arg1 business:(id)arg2 zoom:(struct CGSize)arg3 originalSize:(struct CGSize)arg4 progress:(CDUnknownBlockType)arg5 withIdCompletion:(CDUnknownBlockType)arg6;
- (id)getImage:(id)arg1 business:(id)arg2 zoom:(struct CGSize)arg3 progress:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)getLocalIdWithImage:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)getLocalIdWithImageData:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)retrievePHAssetFromLocalIdentifier:(id)arg1;
- (void)checkResultInfo:(id)arg1 phasset:(id)arg2;
- (_Bool)isiOS8AndLater;
- (struct CGSize)generateReasonableImageSize:(id)arg1 maxSizeIsForced:(_Bool)arg2;
- (void)requestImageData:(id)arg1 options:(id)arg2 info:(id)arg3 complete:(CDUnknownBlockType)arg4;
- (void)requestImage:(id)arg1 options:(id)arg2 info:(id)arg3 complete:(CDUnknownBlockType)arg4;
- (void)requestImageForPHAsset:(id)arg1 info:(id)arg2 compressLevel:(unsigned long long)arg3 synchronous:(_Bool)arg4 networkAccessAllowed:(_Bool)arg5 progress:(CDUnknownBlockType)arg6 complete:(CDUnknownBlockType)arg7;
- (id)syncRequestImageForPHAsset:(id)arg1 info:(id)arg2 compressLevel:(unsigned long long)arg3;
- (id)compress:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)queryInfoForPHAsset:(id)arg1;
- (id)getLocalIdentiferOfPHAssetWithLocalID:(id)arg1;
- (void)mappingLocalID:(id)arg1 withPHAsset:(id)arg2;
- (void)compressImageWithPHAsset:(id)arg1 localID:(id)arg2 compressLevel:(unsigned long long)arg3;
- (id)getLocalIdWithPHAsset:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)getLocalIdWithALAsset:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)getLocalIdWithAsset:(id)arg1 compressLevel:(unsigned long long)arg2;
- (id)getLocalIdWithImage:(id)arg1 compress:(_Bool)arg2;
- (void)uploadOfflineImageWithUrl:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)cancelTaskWithLocalId:(id)arg1;
- (void)addUploadTask:(id)arg1 business:(id)arg2 imageType:(unsigned long long)arg3 compress:(unsigned long long)arg4 needJudgeQuick:(_Bool)arg5 progress:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
- (id)uploadRetryWithLocalIdInternal:(id)arg1 business:(id)arg2 needJudgeQuick:(_Bool)arg3 progress:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)uploadRetryWithLocalId:(id)arg1 business:(id)arg2 progress:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (unsigned long long)getCompressByNet;
- (void)uploadFileByHttpDjangoClientWithPath:(id)arg1 business:(id)arg2 data:(id)arg3 query:(_Bool)arg4 taskRecord:(id)arg5;
- (void)doUploadWithFilePath:(id)arg1 business:(id)arg2 data:(id)arg3 taskRecord:(id)arg4 needJudgeQuick:(_Bool)arg5;
- (id)uploadWithALAsset:(id)arg1 business:(id)arg2 compress:(unsigned long long)arg3 progress:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)uploadWithImageData:(id)arg1 business:(id)arg2 compress:(unsigned long long)arg3 progress:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)uploadWithImage:(id)arg1 business:(id)arg2 compress:(unsigned long long)arg3 progress:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)cropImage:(id)arg1 size:(struct CGSize)arg2 mode:(unsigned long long)arg3;
- (id)thumbnailWithCloudId:(id)arg1 imageType:(unsigned long long)arg2 zoom:(struct CGSize)arg3;
- (id)thumbnailWithId:(id)arg1 zoom:(struct CGSize)arg2;
- (id)thumbnailWithCloudId:(id)arg1 zoom:(struct CGSize)arg2;
- (id)thumbnailWithLocalId:(id)arg1 zoom:(struct CGSize)arg2;
- (id)thumbnailWithData:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (void)thumbnailWithAsset:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3 progress:(CDUnknownBlockType)arg4 complete:(CDUnknownBlockType)arg5;
- (void)thumbnailWithPHAsset:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3 progress:(CDUnknownBlockType)arg4 complete:(CDUnknownBlockType)arg5;
- (id)thumbnailWithALAsset:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (id)thumbnailWithAsset:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (id)thumbnailWithFilePath:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (id)thumbnailWithImage:(id)arg1 zoom:(struct CGSize)arg2 smartCut:(unsigned long long)arg3;
- (id)init;
- (void)clearCacheForExternameImageUrl:(id)arg1;
- (id)getCacheDataForCloudId:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;
- (void)getCacheImageForCloudId:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3 complete:(CDUnknownBlockType)arg4;
- (id)getCacheExternalImageForUrl:(id)arg1;
- (id)getExternalImageWithUrl:(id)arg1 business:(id)arg2 progress:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (id)getCacheImageForCloudId:(id)arg1 size:(struct CGSize)arg2 originalSize:(struct CGSize)arg3;

@end

